package main

import (
	"bufio"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

func main() {
	outputOption := flag.String("view", "cli", "either cli or web html, options: cli vs html")
	fileName := flag.String("file", "story.json", "json file name")
	flag.Parse()

	// 1. open file
	file := OpenFile(*fileName)
	defer file.Close()

	// 2. read file contents
	contents := ReadFile(file)

	// 3. partial parse json. half map and half json
	parsedFile := ParseJsonWithMap(contents)

	// now pass the parsed file to StartGame function and print the intro
	// to stdout. wati for user input to show the next chapter

	if *outputOption == "cli" {
		fmt.Println("CLI chosen")
		StartGame(parsedFile)

	} else if *outputOption == "html" {
		fmt.Println("HTML chosen")
	} else {
		log.Fatal("Wrong flag input: ", *outputOption)
	}
}

func StartGame(d MapData) {
	fmt.Println("\n", d["intro"].Title)
	fmt.Println("\n****************")
	fmt.Println("\n", d["intro"].Story)
	fmt.Println("\n****************")
	fmt.Println("\nWHERE WOULD YOU LIKE TO GO")
	for j, i := range d["intro"].Options {
		fmt.Println(j+1, i.Arc)
		fmt.Println(i.Text)
		fmt.Println("----------------------------------------------------------------------------------------------------------")
	}
	for {
		iterateGame(d)

	}
}

func iterateGame(d MapData) {
	fmt.Println("Please enter you choice: ")
	a := receiveInput()
	if _, ok := d[a]; ok == false {
		fmt.Println("Wrong Input -> ", a)
	} else {
		fmt.Println("\n", d[a].Title)
		fmt.Println("\n****************")
		fmt.Println("\n", d[a].Story)
		fmt.Println("\n****************")
		fmt.Println("\nWHERE WOULD YOU LIKE TO GO")
		for j, i := range d[a].Options {
			fmt.Println(j+1, i.Arc)
			fmt.Println(i.Text)
			fmt.Println("------------------------------------------------------------")
		}

	}
}

func receiveInput() string {
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Scan()
	answer := scanner.Text()
	return answer
}

func OpenFile(n string) *os.File {
	f, err := os.Open(n)
	if err != nil {
		log.Fatal("error opening file: ", err)
	}
	return f
}

func ReadFile(f *os.File) []byte {
	jsonByte, err := ioutil.ReadAll(f)
	if err != nil {
		log.Fatal("error reading json file with ioutil: ", err)
	}
	return jsonByte
}

func ParseJsonWithMap(b []byte) MapData {
	var mapData MapData
	err := json.Unmarshal(b, &mapData)
	if err != nil {
		log.Fatal("error unmarshalling json: ", err)
	}
	return mapData
}

type AutoGenerated struct {
	Title   string    `json:"title"`
	Story   []string  `json:"story"`
	Options []Options `json:"options"`
}
type Options struct {
	Text string `json:"text"`
	Arc  string `json:"arc"`
}

type MapData map[string]AutoGenerated
